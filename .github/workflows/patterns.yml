name: Patterns

on:
  push:
    paths:
      - patterns/**
  pull_request:
    paths:
      - patterns/**
  workflow_dispatch:

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest

    outputs:
      patterns: ${{ github.event_name == 'workflow_dispatch' && steps.patterns.outputs.patterns || steps.filter.outputs.changes }}

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: List all patterns
        id: patterns
        run: |
          patterns=$(find patterns -mindepth 1 -maxdepth 1 -type d -printf '"%P"\n' | jq -c -s .)
          echo "patterns=$patterns" >> $GITHUB_OUTPUT

      - name: Construct the filter expression
        if: github.event_name != 'workflow_dispatch'
        id: expression
        env:
          patterns: ${{ steps.patterns.outputs.patterns }}
        run: |
          expression=$(echo "$patterns" | yq 'map({"key": ., "value": (["patterns/" + . + "/**"])}) | from_entries')
          echo -e "expression=$expression" >> $GITHUB_OUTPUT

      - name: Filter the patterns
        if: github.event_name != 'workflow_dispatch'
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: ${{ steps.expression.outputs.expression }}

  deploy:
    name: Deploy (${{ matrix.pattern }})
    runs-on: ubuntu-latest

    needs:
      - setup

    strategy:
      fail-fast: false
      matrix:
        pattern: ${{ fromJson(needs.setup.outputs.patterns) }}

    env:
      pattern: ${{ matrix.pattern }}

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Docker registry
        if: github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          registry: ${{ vars.DOCKER_REGISTRY }}

      - name: Apply the default configuration
        run: |
          declare -A filetypes

          filetypes=(
            ["main.py"]="python"
            ["main.js"]="javascript"
          )

          cd "patterns/$pattern"

          # Keep the custom Dockerfile if it exists
          if [ -f "Dockerfile" ]; then
            echo "::notice title=Pattern Type ($pattern)::Using custom Dockerfile"
            exit 0
          fi

          # Determine the type of the pattern
          type=""
          for file in "${!filetypes[@]}"; do
            if [ -f "$file" ]; then
              type=${filetypes[$file]}
              break
            fi
          done

          if [ -z "$type" ]; then
            echo "::error::Cannot determine the type of the pattern"
            exit 1
          fi

          echo "::notice title=Pattern Type ($pattern)::Detected pattern type: $type"

          # Copy the default configuration for the type
          cp -r "../../defaults/$type/." "."

      - name: Validate the pattern
        run: |
          cd "patterns/$pattern"

          # Parse the config file
          name=$(yq e '.name' config.yml)
          description=$(yq e '.description' config.yml)
          author=$(yq e '.author' config.yml)
          school=$(yq e '.school' config.yml)
          duration=$(yq e '.duration' config.yml)

          # Get the number of lines in the config file
          lines=$(wc -l config.yml | awk '{print $1}')

          # Output parsed properties as an annotation
          echo "::notice file=patterns/$pattern/config.yml,line=$lines,title=Pattern Properties ($pattern)::Identifier: $pattern%0AName: $name%0ADescription: $description%0AAuthor: $author%0ASchool: $school%0ADuration: $duration"

          # Validate that the name is provided
          if [ "$name" = "null" ]; then
            echo "::error file=patterns/$pattern/config.yml,line=$lines::The name field is required"
            exit 1
          fi

          # Validate that the duration (if provided) is a number
          if [ "$duration" != "null" ] && ! [[ "$duration" =~ ^[0-9]+$ ]]; then
            echo "::error file=patterns/$pattern/config.yml,line=$lines::The duration field must be a number if provided"
            exit 1
          fi

      - name: Build and push the pattern
        uses: docker/build-push-action@v6
        with:
          context: patterns/${{ matrix.pattern }}
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: ${{ github.ref == 'refs/heads/main' && vars.DOCKER_REGISTRY || 'example.com' }}/${{ matrix.pattern }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Submit the pattern to the server
        if: github.ref == 'refs/heads/main'
        run: |
          cd "patterns/$pattern"

          # Parse the config file
          name=$(yq e '.name // ""' config.yml)
          description=$(yq e '.description // ""' config.yml)
          author=$(yq e '.author // ""' config.yml)
          school=$(yq e '.school // ""' config.yml)
          duration=$(yq e '.duration' config.yml)

          # Prepare the payload
          payload=$(jq -n \
            --arg identifier "$pattern" \
            --arg name "$name" \
            --arg description "$description" \
            --arg author "$author" \
            --arg school "$school" \
            --argjson duration "$duration" \
            --arg source "https://github.com/${{ github.repository }}/tree/${{ github.sha }}/patterns/$pattern" \
            --arg docker "${{ vars.DOCKER_REGISTRY }}/$pattern" \
            '{identifier: $identifier, name: $name, description: $description, author: $author, school: $school, duration: $duration, source: $source, docker: $docker}')

          # Submit the payload
          response=$(curl -s -o response.txt -w "%{http_code}" -X POST \
            -H "Authorization: Token ${{ secrets.JELKOB_TOKEN }}" \
            -H "Accept: application/json" \
            -H "Content-Type: application/json" \
            -d "$payload" \
            ${{ vars.JELKOB_URL }})

          # Check the response
          if [[ "$response" -lt 200 || "$response" -ge 300 ]]; then
            echo "::error::Failed to submit the pattern"
            echo "\nStatus code:\n$response"
            echo "\nResponse:"
            cat response.txt
            exit 1
          fi

  summary:
    name: Summary
    if: success() || failure()
    runs-on: ubuntu-latest

    needs:
      - setup
      - deploy

    env:
      patterns: ${{ needs.setup.outputs.patterns }}

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Generate the summary table
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Start the summary table
          echo "| Identifier | Name | Description | Author | School | Duration | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|------|-------------|--------|--------|----------|--------|" >> $GITHUB_STEP_SUMMARY

          for pattern in $(echo "$patterns" | jq -r '.[]'); do
            pushd "patterns/$pattern"

            # Parse the config file
            name=$(yq e '.name' config.yml)
            description=$(yq e '.description' config.yml)
            author=$(yq e '.author' config.yml)
            school=$(yq e '.school' config.yml)
            duration=$(yq e '.duration' config.yml)

            # Check if the pattern was successful
            status=$(gh run view $GITHUB_RUN_ID --json jobs --jq ".jobs[] | select(.name == \"Deploy ($pattern)\") | .conclusion")
            if [[ "$status" = "success" ]]; then
              result=":white_check_mark: Success"
            else
              result=":x: Failure"
            fi

            # Print the summary row
            echo "| $pattern | $name | $description | $author | $school | $duration | $result |" >> $GITHUB_STEP_SUMMARY

            popd
          done
